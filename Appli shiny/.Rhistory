label_movements <- descriptors_database$label_movements
descriptors_database$label_movements <- as.factor(descriptors_database$label_movements)
train <- descriptors_database
test <- descriptors
forest <- randomForest(label_movements ~ ., train, ntree = tree_number)
preds <- predict(forest, test, type = "prob")
if(max(preds) < no_labelled_threshold){
label <- "no_labelled_motion"
print(label)
for (m in 1:width_sliding_window){
filtered_data_with_no_lab$lab_or_no_lab[k + i + m] <- "no labelled"
filtered_data_with_no_lab$name_lab[k + i + m] <- "no labelled"
}
} else {
label <- label_movements[which.max(preds)]
print(label)
for (m in 1:width_sliding_window){
filtered_data_with_no_lab$lab_or_no_lab[k + i + m] <- "labelled"
labs <- as.character(label_movements[which.max(preds)])
filtered_data_with_no_lab$name_lab[k + i + m] <- labs
}
}
labels <- c(labels, label)
}
}
labels <-c(labels, "no_motion")
}
width_sliding_window
filtered_data_with_no_lab
## This is the same code that in the pipeline and the required package functions, but we need to copy/paste because we can not use them directly because we have to add some columns on the table in order to be able to display the results.
predicted_labels <- c()
ind_remove <- c()
filtered_data_with_no_lab <- filtered_data
filtered_data_with_no_lab$lab_or_no_lab <- rep(NA, length(filtered_data_with_no_lab$abscissa))
filtered_data_with_no_lab$name_lab <- rep(NA, length(filtered_data_with_no_lab$abscissa))
ind_beg_seg_filter <- which(filtered_data$start_mov == - 1, arr.ind = TRUE)
if (1%in%ind_beg_seg_filter){
ind_end_seg_filter <- ind_beg_seg_filter[-1] - 1
} else {
ind_end_seg_filter <- ind_beg_seg_filter - 1
}
labels <- c()
for (k in 1 : min(length(ind_beg_seg_filter), length(ind_end_seg_filter))){
print(paste("k=", k))
left_segment_data <- filtered_data[ind_beg_seg_filter[k] : ind_end_seg_filter[k], 2]
right_segment_data <- filtered_data[ind_beg_seg_filter[k] : ind_end_seg_filter[k], 3]
distances_table <- c()
for (i in seq(1, length(left_segment_data), by=width_sliding_window/2)){
print(paste("i=", i))
left_window_data <- left_segment_data[i : (i + width_sliding_window)]
right_window_data <- right_segment_data[i : (i + width_sliding_window)]
descriptors <- compute_descriptors_window(left_window_data, right_window_data, width_sliding_window, descriptors_database, criteria = "forest")
if (!(TRUE%in%is.na(descriptors))){
descriptors_database <- descriptors_database[sample(nrow(descriptors_database)), ]
label_movements <- descriptors_database$label_movements
descriptors_database$label_movements <- as.factor(descriptors_database$label_movements)
train <- descriptors_database
test <- descriptors
forest <- randomForest(label_movements ~ ., train, ntree = tree_number)
preds <- predict(forest, test, type = "prob")
if(max(preds) < no_labelled_threshold){
label <- "no_labelled_motion"
print(label)
for (m in 1:width_sliding_window){
filtered_data_with_no_lab$lab_or_no_lab[k + i + m] <- "no labelled"
filtered_data_with_no_lab$name_lab[k + i + m] <- "no labelled"
}
} else {
label <- label_movements[which.max(preds)]
print(label)
for (m in 1:width_sliding_window){
filtered_data_with_no_lab$lab_or_no_lab[k + i + m] <- "labelled"
labs <- as.character(label_movements[which.max(preds)])
filtered_data_with_no_lab$name_lab[k + i + m] <- labs
}
}
labels <- c(labels, label)
}
}
labels <-c(labels, "no_motion")
}
labels
## This is the same code that in the pipeline and the required package functions, but we need to copy/paste because we can not use them directly because we have to add some columns on the table in order to be able to display the results.
predicted_labels <- c()
ind_remove <- c()
filtered_data_with_no_lab <- filtered_data
filtered_data_with_no_lab$lab_or_no_lab <- rep(NA, length(filtered_data_with_no_lab$abscissa))
filtered_data_with_no_lab$name_lab <- rep(NA, length(filtered_data_with_no_lab$abscissa))
ind_beg_seg_filter <- which(filtered_data$start_mov == - 1, arr.ind = TRUE)
if (1%in%ind_beg_seg_filter){
ind_end_seg_filter <- ind_beg_seg_filter[-1] - 1
} else {
ind_end_seg_filter <- ind_beg_seg_filter - 1
}
labels <- c()
for (k in 1 : min(length(ind_beg_seg_filter), length(ind_end_seg_filter))){
print(paste("k=", k))
left_segment_data <- filtered_data[ind_beg_seg_filter[k] : ind_end_seg_filter[k], 2]
right_segment_data <- filtered_data[ind_beg_seg_filter[k] : ind_end_seg_filter[k], 3]
distances_table <- c()
for (i in seq(1, length(left_segment_data), by=width_sliding_window/2)){
print(paste("i=", i))
left_window_data <- left_segment_data[i : (i + width_sliding_window)]
right_window_data <- right_segment_data[i : (i + width_sliding_window)]
descriptors <- compute_descriptors_window(left_window_data, right_window_data, width_sliding_window, descriptors_database, criteria = "forest")
if (!(TRUE%in%is.na(descriptors))){
descriptors_database <- descriptors_database[sample(nrow(descriptors_database)), ]
label_movements <- descriptors_database$label_movements
descriptors_database$label_movements <- as.factor(descriptors_database$label_movements)
train <- descriptors_database
test <- descriptors
forest <- randomForest(label_movements ~ ., train, ntree = tree_number)
preds <- predict(forest, test, type = "prob")
if(max(preds) < no_labelled_threshold){
label <- "no_labelled_motion"
print(label)
for (m in 1:width_sliding_window){
filtered_data_with_no_lab$lab_or_no_lab[k + i + m] <- "no labelled"
filtered_data_with_no_lab$name_lab[k + i + m] <- "no labelled"
}
} else {
label <- as.character(label_movements[which.max(preds)])
print(label)
for (m in 1:width_sliding_window){
filtered_data_with_no_lab$lab_or_no_lab[k + i + m] <- "labelled"
labs <- as.character(label_movements[which.max(preds)])
filtered_data_with_no_lab$name_lab[k + i + m] <- labs
}
}
labels <- c(labels, label)
}
}
labels <-c(labels, "no_motion")
}
filtered_data_with_no_lab
labels
overall_right_acc <- filtered_data_with_no_lab$overall_right_acc
ordinate_labelled <- abs(filtered_data_with_no_lab$overall_left_acc) + abs(filtered_data_with_no_lab$overall_right_acc)
abscissa_labelled <- filtered_data_with_no_lab$abscissa
df_labelled <- data.frame(abscissa_labelled, ordinate_labelled, filtered_data_with_no_lab$lab_or_no_lab)
colnames(df_labelled) <-c("Time", "Acceleration", "Labelled")
ymax_labelled <- max(ordinate_labelled)
## Display
ggplot(df_labelled) + geom_point(aes(Time, Acceleration, color = Labelled, shape = Labelled, size = Labelled)) +
scale_shape_manual(values=c(18, 20)) +
scale_color_manual(values=c("orange", "blue")) +
scale_size_manual(values=c(0.2, 0.2)) +
xlab("Time (s)") + ylab("Sum of absolute components of wrist acceleration (g)") +
ylim(0, ymax_labelled)
ordinate_labelled
abscissa_labelled
sessionInfo()
knitr::opts_chunk$set(echo = TRUE)
library(actimetry)
library(ggplot2)
library(randomForest)
### INPUTS
resampling_frequency <- 50
immobility_threshold <- 0.7
immobility_length_threshold <- 1
no_labelled_threshold <- 0.4
time_threshold <- 1
tree_number <- 700
window_second_length <- 1
min_motion_time <- 3
# Deduced inputs
width_sliding_window <- window_second_length * resampling_frequency
min_motion_length <- min_motion_time * resampling_frequency
### Data import
setwd("C:/Users/lisag/Documents/Scolaire/EPF/2021-2022/Stage Euromov/Activites/package de la fenetre glissante/Visualisation donnÃ©es")
file1 = "AlzCol_test_right_wrist_42977.csv"
file2 = "AlzCol_test_left_wrist_42164.csv"
fileTime = "AlzCol_test_time.csv"
left_wrist <- read.csv(file = file2, sep = ",", header = FALSE, col.names = c("Time", "X", "Y", "Z"))
right_wrist <- read.csv(file = file1, sep = "," , header = FALSE, col.names = c("Time", "X", "Y", "Z"))
real_time_mvt <- read.csv(file = fileTime, sep = ",", header = FALSE)
resampled_accelerations <- resample(left_wrist, right_wrist, resampling_frequency)
## The immobility will be filtered thanks to a threshold on the sum of absolute right and left components of wrist acceleration, so to display the evolution of used data, we have to display this sum.
## Creation of the abscissa
abscissa <- 0
value <- 0
for (k in 1:(dim(resampled_accelerations)[1] - 1)){
value <- value + 0.02
abscissa <- c(abscissa, value)
}
## Creation of the ordinate
ordinate_resampling <- abs(resampled_accelerations[, 1]) + abs(resampled_accelerations[, 2])
##Creation of the dataframe
df_resampling <- data.frame(abscissa, ordinate_resampling)
colnames(df_resampling) <-c("Time", "Acceleration")
ymax_resampling <- max(ordinate_resampling)
## Display
ggplot(df_resampling) + geom_point(aes(Time, Acceleration), color = "blue", shape = 20, size = 0.2) +
xlab("Time (s)") + ylab("Sum of absolute right and left components of wrist acceleration (g)") +
ylim(0, ymax_resampling)
## This is the same code that in the pipeline and the required package functions, but we need to copy/paste because we can not use them directly because we have to add some columns on the table in order to be able to display the results.
## We re write the function of immobility filtering by adding some lines to build a table with a column indicating "immobility" or "motion", to display on a graphe the data which are immobility and the data wich are motion.
df <- resampled_accelerations
df$immobility <- "motion" ## To display later in different colors the data corresponding to motion
df[abs(df$overall_left_acc) + abs(df$overall_right_acc) < immobility_threshold, "immobility"] <- "immobility"
immobility_length_threshold <- immobility_length_threshold * resampling_frequency
row_threshold <- time_threshold * resampling_frequency
immo_successive <- diff(which(df$immobility == "immobility"))
counter <- which(df$immobility == "immobility")[1]
indexes_to_change <- c()
i <- 1
while (i < length(immo_successive)){
if (immo_successive[i] == 1){
l <- i
nb_immo <- 0
index <- c()
while((l< length(immo_successive)) && (immo_successive[l] == 1)){
index <- c(index, counter + nb_immo)
nb_immo <- nb_immo + 1
l <- l + 1
}
index <- c(index, counter + nb_immo)
if (nb_immo < immobility_length_threshold){
indexes_to_change <- c(indexes_to_change, index)
}
counter <- counter + nb_immo + immo_successive[l]
i <- l + 1
} else {
counter <- counter + immo_successive[i]
i <- i + 1
}
}
for (ind in indexes_to_change){
df$immobility[ind] <- "motion"
}
########### Display of the data by highlighting the immobility data and the motion data
## Creation of the ordinate
ordinate_immo <- abs(df$overall_left_acc) + abs(df$overall_right_acc)
##Creation of the dataframe
df_immo <- data.frame(abscissa, ordinate_immo, df$immobility)
colnames(df_immo) <-c("Time", "Acceleration", "Immobility")
ymax_immo <- max(ordinate_immo)
## Display
ggplot(df_immo) + geom_point(aes(Time, Acceleration, color = Immobility, shape = Immobility, size = Immobility)) +
scale_shape_manual(values=c(18, 20)) +
scale_color_manual(values=c("orange", "blue")) +
scale_size_manual(values=c(0.2, 0.2)) +
xlab("Time (s)") + ylab("Sum of absolute components of wrist acceleration (g)") +
ylim(0, ymax_immo)
time_threshold <- 1
immobility_length_threshold <- 1
#################################### script for immobility but with adding a column to save the time of every acceleration in order to display
row_threshold <- time_threshold * resampling_frequency
immobility_length_threshold <- immobility_length_threshold * resampling_frequency
df <- resampled_accelerations
df <- cbind(abscissa, resampled_accelerations)
df$immobility <- 0
df[abs(df$overall_left_acc) + abs(df$overall_right_acc) < immobility_threshold, "immobility"] <- 1
## We consider that there is immobility only if there is enough successive immobility
immo_successive <- diff(which(df$immobility == 1))
counter <- which(df$immobility == 1)[1]
indexes_to_change <- c()
i <- 1
while (i < length(immo_successive)){
if (immo_successive[i] == 1){
l <- i
nb_immo <- 0
index <- c()
while((l< length(immo_successive)) && (immo_successive[l] == 1)){
index <- c(index, counter + nb_immo)
nb_immo <- nb_immo + 1
l <- l + 1
}
index <- c(index, counter + nb_immo)
if (nb_immo < immobility_length_threshold){
indexes_to_change <- c(indexes_to_change, index)
}
counter <- counter + nb_immo + immo_successive[l]
i <- l + 1
} else {
counter <- counter + immo_successive[i]
i <- i + 1
}
}
for (ind in indexes_to_change){
df$immobility[ind] <- 0
}
#we determine the beginning of movements
if (df$immobility[1] == 0){
df$start_mov <- c(-1, diff(df$immobility))
} else if (df$immobility[1] == 1){
df$start_mov <- c(0, diff(df$immobility))
}
filtered_data <- df[df$immobility == 0, ]
start_short_move <- c()
gaps <- diff(which(filtered_data$start_mov == - 1))#return the difference between
if (gaps[1] < row_threshold){
start_short_move <- c(start_short_move, 1) #List of the index of beginning of short movements
}
ind_tot <- gaps[1] #We count the index where we are
for (k in 2:length(gaps)){
if (gaps[k] < row_threshold){
start_short_move <- c(start_short_move, ind_tot + 1) #We use the total index from the range before + 1, because it corresponds to the beginning of this short movement
}
ind_tot <- ind_tot + gaps[k]#the index in the list
}
if(tail(start_short_move, 1) == nrow(filtered_data)){ #we check that their is no a problem with the value on the border
start_short_move <- start_short_move[-length(start_short_move)]
}
index_to_remove <- c()
for (i in start_short_move){
k <- i + 1
while(filtered_data$start_mov[k] != - 1){
index_to_remove <- c(index_to_remove, k)
k <- k + 1
}
}
filtered_data <- filtered_data[-index_to_remove, ]
########### Display of the motion data (the immobility data have been removed)
overall_left_acc <- filtered_data$overall_left_acc
overall_right_acc <- filtered_data$overall_right_acc
ordinate_filtered <- abs(filtered_data$overall_left_acc) + abs(filtered_data$overall_right_acc)
abscissa_filtered <- filtered_data$abscissa
df_filtered <- data.frame(abscissa_filtered, ordinate_filtered)
colnames(df_filtered) <-c("Time", "Acceleration")
ymax_filtered <- max(ordinate_filtered)
## Display
ggplot(df_filtered, aes(Time, Acceleration)) + geom_point(shape = 20, size = 0.2) +
xlab("Time (s)") + ylab("Sum of absolute components of wrist acceleration (g)") +
ylim(0, ymax_filtered)
# Database import
file3 = "actimetry_database.csv"
database <- read.csv(file = file3, sep = ",", header = FALSE, col.names = c("Time", "Xright", "Yright", "Zright", "NormRight", "Xleft", "Yleft", "Zleft", "NormLeft", "label", "idSubject", "idMove", "id"), skip = 1)
label_movements <- c(unique(paste(database$label)))
# Descriptors computation
descriptors_database <- compute_descriptors_db(database, criteria = "forest")
## This is the same code that in the pipeline and the required package functions, but we need to copy/paste because we can not use them directly because we have to add some columns on the table in order to be able to display the results.
predicted_labels <- c()
ind_remove <- c()
filtered_data_with_no_lab <- filtered_data
filtered_data_with_no_lab$lab_or_no_lab <- rep(NA, length(filtered_data_with_no_lab$abscissa))
filtered_data_with_no_lab$name_lab <- rep(NA, length(filtered_data_with_no_lab$abscissa))
ind_beg_seg_filter <- which(filtered_data$start_mov == - 1, arr.ind = TRUE)
if (1%in%ind_beg_seg_filter){
ind_end_seg_filter <- ind_beg_seg_filter[-1] - 1
} else {
ind_end_seg_filter <- ind_beg_seg_filter - 1
}
labels <- c()
for (k in 1 : min(length(ind_beg_seg_filter), length(ind_end_seg_filter))){
left_segment_data <- filtered_data[ind_beg_seg_filter[k] : ind_end_seg_filter[k], 2]
right_segment_data <- filtered_data[ind_beg_seg_filter[k] : ind_end_seg_filter[k], 3]
distances_table <- c()
for (i in seq(1, length(left_segment_data), by=width_sliding_window/2)){
left_window_data <- left_segment_data[i : (i + width_sliding_window)]
right_window_data <- right_segment_data[i : (i + width_sliding_window)]
descriptors <- compute_descriptors_window(left_window_data, right_window_data, width_sliding_window, descriptors_database, criteria = "forest")
if (!(TRUE%in%is.na(descriptors))){
descriptors_database <- descriptors_database[sample(nrow(descriptors_database)), ]
label_movements <- descriptors_database$label_movements
descriptors_database$label_movements <- as.factor(descriptors_database$label_movements)
train <- descriptors_database
test <- descriptors
forest <- randomForest(label_movements ~ ., train, ntree = tree_number)
preds <- predict(forest, test, type = "prob")
if(max(preds) < no_labelled_threshold){
label <- "no_labelled_motion"
for (m in 1:width_sliding_window){
filtered_data_with_no_lab$lab_or_no_lab[k + i + m] <- "no labelled"
filtered_data_with_no_lab$name_lab[k + i + m] <- "no labelled"
}
} else {
label <- as.character(label_movements[which.max(preds)])
for (m in 1:width_sliding_window){
filtered_data_with_no_lab$lab_or_no_lab[k + i + m] <- "labelled"
labs <- as.character(label_movements[which.max(preds)])
filtered_data_with_no_lab$name_lab[k + i + m] <- labs
}
}
labels <- c(labels, label)
}
}
labels <-c(labels, "no_motion")
}
overall_left_acc <- filtered_data_with_no_lab$overall_left_acc
overall_right_acc <- filtered_data_with_no_lab$overall_right_acc
ordinate_labelled <- abs(filtered_data_with_no_lab$overall_left_acc) + abs(filtered_data_with_no_lab$overall_right_acc)
abscissa_labelled <- filtered_data_with_no_lab$abscissa
df_labelled <- data.frame(abscissa_labelled, ordinate_labelled, filtered_data_with_no_lab$lab_or_no_lab)
colnames(df_labelled) <-c("Time", "Acceleration", "Labelled")
ymax_labelled <- max(ordinate_labelled)
## Display
ggplot(df_labelled) + geom_point(aes(Time, Acceleration, color = Labelled, shape = Labelled, size = Labelled)) +
scale_shape_manual(values=c(18, 20)) +
scale_color_manual(values=c("orange", "blue")) +
scale_size_manual(values=c(0.2, 0.2)) +
xlab("Time (s)") + ylab("Sum of absolute components of wrist acceleration (g)") +
ylim(0, ymax_labelled)
ymax_labelled
df_labelled
shiny::runApp('Scolaire/EPF/2021-2022/Stage Euromov/Activites/shiny App/visualisation_actimetry')
shiny::runApp('Scolaire/EPF/2021-2022/Stage Euromov/Activites/shiny App/visualisation_actimetry')
runApp('Scolaire/EPF/2021-2022/Stage Euromov/Activites/shiny App/visualisation_actimetry')
runApp('Scolaire/EPF/2021-2022/Stage Euromov/Activites/shiny App/visualisation_actimetry')
file2
file2
library(ggplot2)
library(reshape2)
library(actimetry)
### INPUTS
resampling_frequency <- 50
immobility_threshold
immobility_length_threshold <- 1
no_labelled_threshold
window_second_length <- 1
time_threshold <- 1
tree_number
min_motion_time <- 2
# Deduced inputs
width_sliding_window <- window_second_length * resampling_frequency
min_motion_length <- min_motion_time * resampling_frequency
### Data import
setwd("C:/Users/lisag/Documents/Scolaire/EPF/2021-2022/Stage Euromov/Activites/shiny App/visualisation_actimetry/data")
left_wrist <- read.csv(file = file2, sep = ",", header = FALSE, col.names = c("Time", "X", "Y", "Z"))
right_wrist <- read.csv(file = file1, sep = "," , header = FALSE, col.names = c("Time", "X", "Y", "Z"))
time_real_motion <- read.csv(file = filetime, sep = "," , header = FALSE, col.names = "Time")
real_time <- time_real_motion$Time
### Resampling of data
resampled_accelerations <- resample(left_wrist, right_wrist, resampling_frequency)
### Real motion to compare
real_motion <- real_motion(real_time, resampled_accelerations)
resampling_plot <- show(resampled_accelerations, real_motion, "resampling")
### Immobility filtering
filtered_data <- immobility_withdrawal_simplified(resampled_accelerations, resampling_frequency, immobility_threshold, immobility_length_threshold, time_threshold, min_motion_length)
motion_plot <- show(filtered_data, real_motion, "immobility filter")
### Database descriptors computation
# Database import
file3 = "actimetry_database.csv"
database <- read.csv(file = file3, sep = ",", header = FALSE, col.names = c("Time", "Xright", "Yright", "Zright", "NormRight", "Xleft", "Yleft", "Zleft", "NormLeft", "label", "idSubject", "idMove", "id"), skip = 1)
label_movements <- c(unique(paste(database$label)))
# Descriptors computation
descriptors_database <- compute_descriptors_db(database, criteria = "forest")
### Sliding window
lab_or_no_lab <- rep(NA, length(filtered_data$new_time_axis))
name_lab <- rep(NA, length(filtered_data$new_time_axis))
confidence_level <- rep(NA, length(filtered_data$new_time_axis))
predicted_labels <- data.frame(filtered_data$new_time_axis, filtered_data$overall_left_acc, filtered_data$overall_right_acc, filtered_data$start_mov, lab_or_no_lab, name_lab, confidence_level)
ind_beg_seg_filter <- which(filtered_data$start_mov == - 1, arr.ind = TRUE)
if (1%in%ind_beg_seg_filter){
ind_end_seg_filter <- ind_beg_seg_filter[-1] - 1
} else {
ind_end_seg_filter <- ind_beg_seg_filter - 1
}
for (k in 1 : min(length(ind_beg_seg_filter), length(ind_end_seg_filter))){
left_segment_data <- filtered_data[ind_beg_seg_filter[k] : ind_end_seg_filter[k], 2]
right_segment_data <- filtered_data[ind_beg_seg_filter[k] : ind_end_seg_filter[k], 3]
n <- ind_beg_seg_filter[k]
for (i in seq(1, length(left_segment_data), by=width_sliding_window/2)){
left_window_data <- left_segment_data[i : (i + width_sliding_window)]
right_window_data <- right_segment_data[i : (i + width_sliding_window)]
descriptors <- compute_descriptors_window(left_window_data, right_window_data, width_sliding_window, descriptors_database, criteria = "forest")
if (!(TRUE%in%is.na(descriptors))){
label_confidence_level <- classify_forest_without_SW(descriptors_database, descriptors, no_labelled_threshold, tree_number)
label <- label_confidence_level[1]
confidence_level <- label_confidence_level[2]
m <- 1
while (((n + i + m - 2) <length(filtered_data$new_time_axis)) & (m < width_sliding_window)){
predicted_labels$name_lab[n + i + m - 2] <- label
predicted_labels$confidence_level[n + i + m - 2] <- confidence_level
if (label == "no_labelled_motion"){
predicted_labels$lab_or_no_lab[n + i + m - 2] <- "no_labelled"
} else {
predicted_labels$lab_or_no_lab[n + i + m - 2] <- "labelled"
}
m <- m + 1
}
}
}
}
predicted_labels <- predicted_labels[- which(is.na(predicted_labels), arr.ind = TRUE)[,1], ]
colnames(predicted_labels) <- c("time", "left_acceleration", "right_acceleration", "start_mov", "lab_or_no_lab", "name_lab", "confidence_level")
#### Merging  function
merged_labels <- merger(predicted_labels)
#Labelled and no labelled motion
lab_no_lab_plot <- show(merged_labels, real_motion, "no labelled filter")
#Different label motions
lab_plot <- show(merged_labels, real_motion, "labels")
merged_labels_without_nolab <- merged_labels[- which(merged_labels$lab_or_no_lab=="no_labelled"), ]
lab_plot_without_nolab <- show(merged_labels_without_nolab, real_motion, "labels")
### Count occurrences of labels
labels <- merged_labels[, 6] #To have just a list of labels to group and count
obtained_result <- count_occurrences(label_movements, labels)
### Import of the expected result
global_expect_results <- read.table("AlzCol_test_RES_thirdstep_time_line.txt", header = TRUE, sep = ",")
# We find the different movement labels in the sequence
tot_mov_names <- c(paste(global_expect_results$label))
# Table of occurrences and labels
expect_results <- count_occurrences(label_movements, tot_mov_names)
### Evaluation
MAE <- evaluate_MAE(obtained_result, expect_results, database)
shiny::runApp('~/Scolaire/EPF/2021-2022/Stage Euromov/Activites/shiny App/visualisation_actimetry')
source(server.R)
source("server.R")
runApp('~/Scolaire/EPF/2021-2022/Stage Euromov/Activites/shiny App/visualisation_actimetry')
runApp('~/Scolaire/EPF/2021-2022/Stage Euromov/Activites/shiny App/visualisation_actimetry')
shiny::runApp()
runApp()
runApp('~/Scolaire/EPF/2021-2022/Stage Euromov/Activites/shiny App/visualisation_actimetry')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
